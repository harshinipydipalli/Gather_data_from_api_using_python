# -*- coding: utf-8 -*-
"""weatherapi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxXt6E3ZDNT066EjZxS9To-p_2txnZol
"""

import requests

#Your API key
api_key = "3d688a950bf240b796963950251604"


base_url = "https://api.weatherapi.com/v1/current.json"

#👈 input the city name from user, Let the user decide!
city = input("Enter a city: ")

"""
Here params represent query parameters, key,q,aqi are the parameteers that are specified used only for this weather api
and it would be different for youtube api, google api ans so on , params here is a variable it can be any name
you can write parameters that passed in any order, aqi stands for air quality index
"""
params = {"key": api_key, "q": city, "aqi":"yes"}


"""
this is the main line that connects to the weather API server to get data you can also write this as
response = requests.get(base_url, params={"key": api_key, "q": city})
✅ Quick and simple
✅ Works perfectly for short, one-off calls
⚠️ Can get messy if your list of parameters grows
so its always a best praticse to use params variable to pass parameters
"""
response = requests.get(base_url, params=params)

# Getting data in json format
data = response.json()

# ✅ Extracting specific weather details:
time = data["location"]["localtime"]
temperature = data["current"]["temp_c"]
feels_like= data["current"]["feelslike_c"]
weather_condition = data["current"]["condition"]["text"]     # Like "Sunny", "Rainy"
humidity = data["current"]["humidity"]
precip_mm = data["current"]["precip_mm"]
wind = data["current"]["wind_kph"]
air_quality = data["current"]["air_quality"]
"""
To get AQI Condition, we create the condition ourselves using standard AQI breakpoints
In india, PM2.5 is the main metric

"""
#air quality check
pm25 = air_quality["pm2_5"] # pm25 = data['current"]["air_quality"]["pm2_5"]
if pm25 <= 12:
    air_condition = "Good"
elif pm25 <= 35.4:
    air_condition = "Moderate"
elif pm25 <= 55.4:
    air_condition = "Unhealthy for Sensitive Groups"
elif pm25 <= 150.4:
    air_condition = "Unhealthy"
elif pm25 <= 250.4:
    air_condition = "Very Unhealthy"
else:
    air_condition = "Hazardous"
# Humidity check
if humidity >= 60:
    humidity_condition = "High"
else:
    humidity_condition = "Low"


# Extract weather info
is_raining = "rain" in weather_condition # data["current"]["condition"]["text"].lower()

"""
you can also use direct dictionary every time like this humidity = data["current"]["humidity"] but not recommemnde because
🔹 Works fine, but gets messy if you use it in many places.
🔹 Not ideal if data["current"]["humidity"] ever changes (like different structure for forecast, etc.).
"""

# Impact of Humdity and rain
if is_raining and humidity >= 60:
    aqi_comment = "Rain likely, but high humidity may trap pollutants."
elif is_raining:
    aqi_comment = "Rain may have cleaned up larger pollutants."
elif humidity >= 70:
    aqi_comment = "High humidity may trap pollutants near the ground."
else:
    aqi_comment = "Dry conditions; air quality depends on pollution sources."

"""
Now say:
is_raining = True
humidity = 58
Let’s trace it:

First if → is_raining = True, but humidity >= 60 is False
So skip this block.

Next elif is_raining: → True!
So it runs this block:
"Rain may have cleaned up larger pollutants."

So for humidity = 58, this will not confuse Python at all.
Python evaluates conditions in order, and as soon as one is true, it exits the chain.

"""
# 🌈 Print the full weather status
print(f"Weather in {city}:")
print(f'Time right now: {time}')
print("\n")
print(f"🌡️ Temperature: {temperature}°C")
print(f'🌦️ Feels like {feels_like}')
print(f'Weather Condition: {weather_condition}')
print(f"💧 Humidity: {humidity}%")
print(f"🌧️ Precipitation: {precip_mm} mm")
print(f'Wind: {wind}')
print(f'Air Quality: {air_quality}')
"""
Why cant you use  " double quites in pm2_5 in the below print
print(f" air quality in terms of pm2.5 : {air_quality["pm2_5"]}") because
✅ You can use either single ' or double " quotes — BUT you have to nest them right.
Here’s the key rule:
If you open your f-string with double quotes f"...", then inside it, use single quotes '...' for dictionary keys.

"""
print(f"Air quality in terms of pm2_5: {air_quality['pm2_5']}")
print("\n")
print("Summary---\n")
print(f"In {city}, it feels like {feels_like} Weather is {weather_condition}. In India, pm2.5 determines the air quality and right now it is {air_quality['pm2_5']} which is {air_condition}")
print(f"and humidity is {humidity}% which is {humidity_condition} {aqi_comment}")

#save it as csv
import csv
""" with is  a keyword used for opening and closing the files safely"""
with open("weather_date.csv",mode="w",newline="")as file:
  writer = csv.writer(file)
  writer.writerow(["city","time","temperature","feels_like","weather_condition","humidity","precip_mm","wind","air_quality"])
  writer.writerow([city,time,temperature,feels_like,weather_condition,humidity,precip_mm,wind,air_quality])

#multiple rows execution , multiple entry of cities